<svg width="750" height="1050" viewBox="0 0 750 1050" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Arrowhead for dependency (open arrow) -->
    <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="5" orient="auto" markerUnits="strokeWidth">
      <path d="M 0 0 L 10 5 L 0 10 z" fill="#333" stroke="#333" stroke-width="1" />
    </marker>
    <!-- Composition diamond (filled diamond) -->
    <marker id="composition" markerWidth="12" markerHeight="12" refX="1" refY="6" orient="auto" markerUnits="strokeWidth">
      <path d="M 1 6 L 6 1 L 11 6 L 6 11 z" fill="#333" stroke="#333" stroke-width="1" />
    </marker>
  </defs>

  <!-- Styles for UML elements -->
  <style>
    .class-box {
      stroke: #333;
      stroke-width: 2;
      rx: 8; /* Rounded corners */
      ry: 8;
    }
    .backend-class { fill: #e0f2f7; } /* Light blue for backend */
    .frontend-class { fill: #fce4ec; } /* Light pink for frontend */
    .class-name {
      font-family: 'Inter', sans-serif;
      font-size: 16px;
      font-weight: bold;
      text-anchor: middle;
      fill: #333;
    }
    .class-attribute, .class-method {
      font-family: 'Inter', sans-serif;
      font-size: 13px;
      fill: #555;
    }
    .relationship-line {
      stroke: #333;
      stroke-width: 1.5;
      fill: none;
    }
    .multiplicity {
      font-family: 'Inter', sans-serif;
      font-size: 11px;
      fill: #333;
    }
  </style>

  <!-- Backend Classes -->
  <!-- FlaskServer Class -->
  <rect x="50" y="50" width="200" height="220" class="class-box backend-class" />
  <text x="150" y="75" class="class-name">FlaskServer</text>
  <line x1="50" y1="95" x2="250" y2="95" stroke="#333" stroke-width="1" />
  <text x="60" y="115" class="class-attribute">- graph: Graph</text>
  <text x="60" y="130" class="class-attribute">- app: Flask</text>
  <line x1="50" y1="145" x2="250" y2="145" stroke="#333" stroke-width="1" />
  <text x="60" y="160" class="class-method">+ add_node_route(): JSON</text>
  <text x="60" y="175" class="class-method">+ add_edge_route(): JSON</text>
  <text x="60" y="190" class="class-method">+ remove_node_route(): JSON</text>
  <text x="60" y="205" class="class-method">+ remove_edge_route(): JSON</text>
  <text x="60" y="220" class="class-method">+ update_edge_route(): JSON</text>
  <text x="60" y="235" class="class-method">+ update_node_position_route(): JSON</text>
  <text x="60" y="250" class="class-method">+ find_path_route(): JSON</text>
  <text x="60" y="265" class="class-method">+ init_sample_data(): void</text>

  <!-- Graph Class -->
  <rect x="50" y="300" width="200" height="190" class="class-box backend-class" />
  <text x="150" y="325" class="class-name">Graph</text>
  <line x1="50" y1="345" x2="250" y2="345" stroke="#333" stroke-width="1" />
  <text x="60" y="365" class="class-attribute">- nodes: Dictionary</text>
  <text x="60" y="380" class="class-attribute">- edges: Dictionary</text>
  <line x1="50" y1="395" x2="250" y2="395" stroke="#333" stroke-width="1" />
  <text x="60" y="410" class="class-method">+ add_node(name, x, y): void</text>
  <text x="60" y="425" class="class-method">+ add_edge(from, to, weight): void</text>
  <text x="60" y="440" class="class-method">+ remove_node(name): void</text>
  <text x="60" y="455" class="class-method">+ remove_edge(from, to): void</text>
  <text x="60" y="470" class="class-method">+ update_edge(from, to, weight): void</text>
  <text x="60" y="485" class="class-method">+ update_node_position(name, x, y): void</text>

  <!-- PathFinder Class -->
  <rect x="50" y="510" width="200" height="120" class="class-box backend-class" />
  <text x="150" y="535" class="class-name">PathFinder</text>
  <line x1="50" y1="555" x2="250" y2="555" stroke="#333" stroke-width="1" />
  <text x="60" y="575" class="class-attribute">- graph: Graph</text>
  <line x1="50" y1="590" x2="250" y2="590" stroke="#333" stroke-width="1" />
  <text x="60" y="605" class="class-method">+ dijkstra(start, end): (path[], dist)</text>
  <text x="60" y="620" class="class-method">+ bfs(start, end): path[]</text>

  <!-- Frontend Classes -->
  <!-- UIController Class -->
  <rect x="500" y="50" width="200" height="250" class="class-box frontend-class" />
  <text x="600" y="75" class="class-name">UIController</text>
  <line x1="500" y1="95" x2="700" y2="95" stroke="#333" stroke-width="1" />
  <text x="510" y="115" class="class-attribute">- apiClient: APIClient</text>
  <text x="510" y="130" class="class-attribute">- graphRenderer: GraphRenderer</text>
  <text x="510" y="145" class="class-attribute">- dropdowns: Object</text>
  <text x="510" y="160" class="class-attribute">- inputs: Object</text>
  <line x1="500" y1="175" x2="700" y2="175" stroke="#333" stroke-width="1" />
  <text x="510" y="190" class="class-method">+ updateDropdowns(): void</text>
  <text x="510" y="205" class="class-method">+ addNode(): void</text>
  <text x="510" y="220" class="class-method">+ addEdge(): void</text>
  <text x="510" y="235" class="class-method">+ removeNode(): void</text>
  <text x="510" y="250" class="class-method">+ removeEdge(): void</text>
  <text x="510" y="265" class="class-method">+ updateEdge(): void</text>
  <text x="510" y="280" class="class-method">+ findPath(): void</text>

  <!-- APIClient Class -->
  <rect x="500" y="330" width="200" height="190" class="class-box frontend-class" />
  <text x="600" y="355" class="class-name">APIClient</text>
  <line x1="500" y1="375" x2="700" y2="375" stroke="#333" stroke-width="1" />
  <text x="510" y="395" class="class-attribute">- apiUrl: String</text>
  <line x1="500" y1="410" x2="700" y2="410" stroke="#333" stroke-width="1" />
  <text x="510" y="425" class="class-method">+ addNode(...): Promise</text>
  <text x="510" y="440" class="class-method">+ addEdge(...): Promise</text>
  <text x="510" y="455" class="class-method">+ removeNode(...): Promise</text>
  <text x="510" y="470" class="class-method">+ removeEdge(...): Promise</text>
  <text x="510" y="485" class="class-method">+ updateEdge(...): Promise</text>
  <text x="510" y="500" class="class-method">+ updateNodePosition(...): Promise</text>
  <text x="510" y="515" class="class-method">+ findPath(...): Promise</text>

  <!-- GraphRenderer Class -->
  <rect x="500" y="540" width="200" height="250" class="class-box frontend-class" />
  <text x="600" y="565" class="class-name">GraphRenderer</text>
  <line x1="500" y1="585" x2="700" y2="585" stroke="#333" stroke-width="1" />
  <text x="510" y="605" class="class-attribute">- canvas: HTMLCanvasElement</text>
  <text x="510" y="620" class="class-attribute">- ctx: CanvasRenderingContext2D</text>
  <text x="510" y="635" class="class-attribute">- nodes: Dictionary</text>
  <text x="510" y="650" class="class-attribute">- edges: Dictionary</text>
  <text x="510" y="665" class="class-attribute">- selectedPath: Array</text>
  <text x="510" y="680" class="class-attribute">- graphSettings: Object</text>
  <line x1="500" y1="695" x2="700" y2="695" stroke="#333" stroke-width="1" />
  <text x="510" y="710" class="class-method">+ drawGraph(): void</text>
  <text x="510" y="725" class="class-method">+ drawNode(...): void</text>
  <text x="510" y="740" class="class-method">+ drawEdge(...): void</text>
  <text x="510" y="755" class="class-method">+ updateGraphBounds(): void</text>
  <text x="510" y="770" class="class-method">+ transformPoint(...): {x, y}</text>
  <text x="510" y="785" class="class-method">+ inverseTransformPoint(...): {x, y}</text>

  <!-- GraphInteractionHandler Class -->
  <rect x="500" y="810" width="200" height="220" class="class-box frontend-class" />
  <text x="600" y="835" class="class-name">GraphInteractionHandler</text>
  <line x1="500" y1="855" x2="700" y2="855" stroke="#333" stroke-width="1" />
  <text x="510" y="875" class="class-attribute">- canvas: HTMLCanvasElement</text>
  <text x="510" y="890" class="class-attribute">- nodes: Dictionary</text>
  <text x="510" y="905" class="class-attribute">- isDragging: Boolean</text>
  <text x="510" y="920" class="class-attribute">- draggedNode: String</text>
  <text x="510" y="935" class="class-attribute">- lastMousePos: {x, y}</text>
  <line x1="500" y1="950" x2="700" y2="950" stroke="#333" stroke-width="1" />
  <text x="510" y="965" class="class-method">+ handleMouseDown(event): void</text>
  <text x="510" y="980" class="class-method">+ handleMouseMove(event): void</text>
  <text x="510" y="995" class="class-method">+ handleMouseUp(event): void</text>
  <text x="510" y="1010" class="class-method">+ handleCanvasClick(event): void</text>
  <text x="510" y="1025" class="class-method">+ findNodeUnderPoint(x, y): String</text>

  <!-- Relationships -->
  <!-- 1. FlaskServer has a Graph (composition) -->
  <line x1="150" y1="270" x2="150" y2="300" class="relationship-line" marker-end="url(#composition)" />
  <text x="160" y="280" class="multiplicity">1</text>
  <text x="160" y="295" class="multiplicity">1</text>

  <!-- 2. FlaskServer uses PathFinder for algorithms (association) -->
  <path d="M 250 160 L 375 160 L 375 570 L 250 570" class="relationship-line" marker-end="url(#arrow)" />

  <!-- 3. PathFinder uses Graph for data (dependency) -->
  <line x1="150" y1="510" x2="150" y2="490" class="relationship-line" marker-end="url(#arrow)" />

  <!-- 4. GraphRenderer renders data from Graph (dependency) -->
  <path d="M 500 660 L 400 660 L 400 390 L 250 390" class="relationship-line" marker-end="url(#arrow)" />

  <!-- 5. GraphInteractionHandler manipulates Graph through APIClient (dependency) -->
  <line x1="600" y1="810" x2="600" y2="520" class="relationship-line" marker-end="url(#arrow)" />

  <!-- 6. UIController coordinates GraphRenderer and APIClient (composition) -->
  <!-- UIController to GraphRenderer -->
  <line x1="600" y1="300" x2="600" y2="540" class="relationship-line" marker-end="url(#composition)" />
  <text x="610" y="310" class="multiplicity">1</text>
  <text x="610" y="530" class="multiplicity">1</text>

  <!-- UIController to APIClient -->
  <line x1="600" y1="300" x2="600" y2="330" class="relationship-line" marker-end="url(#composition)" />
  <text x="610" y="310" class="multiplicity">1</text>
  <text x="610" y="325" class="multiplicity">1</text>

  <!-- 7. UIController updates UI based on Graph data (dependency) -->
  <path d="M 500 175 L 375 175 L 375 390 L 250 390" class="relationship-line" marker-end="url(#arrow)" />

</svg>
